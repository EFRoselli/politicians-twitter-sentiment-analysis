<!DOCTYPE html>
<html>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="js/d3.layout.cloud.js"></script>
<head>
  <meta charset="UTF-8">
  <title>Politician Sentiment Analysis</title>
  <link rel="shortcut icon" href="/img/favicon.ico" />
  <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400italic,400,700' rel='stylesheet' type='text/css'>
  <!-- <link href='http://grommet.io/assets/latest/css/grommet.min.css' rel='stylesheet' type='text/css'> -->
  <script src="js/jquery-1.12.0.min.js"></script>
  <link href='css/grommet.min.css' rel='stylesheet' type='text/css'>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.2/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.2/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
  <!-- <script src="http://grommet.io/assets/latest/grommet.min.js"></script> -->
  <script src="js/grommet.min.js"></script>
  <script src="js/colorbox/jquery.colorbox-min.js"></script>
  <style>
  .meter--bar:not(.meter--vertical) .meter__value {
    display: none;
  }
  .meter--bar.meter--vertical .meter__value {
    display: none;
  }
  </style>
</head>
<body>
  <!-- <script src="https://cdn.socket.io/socket.io-1.2.0.js"></script> -->
  <script src="/socket.io/socket.io.js"></script>
  <div id="content"></div>
  <script type="text/babel">

  var socket = io();

  var SentimentMeters = React.createClass({
    getInitialState: function() {
      var data = {
        "Bernie Sanders": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Hillary Clinton": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Donald Trump": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Ted Cruz": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Marco Rubio": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Ben Carson": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        }
      }
      return data;
    },

    _onMessageReceived: function (msg) {
      console.log(msg);
      if (msg.candidate === "SenSanders") {
        this.setState({"Bernie Sanders": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "HillaryClinton") {
        this.setState({"Hillary Clinton": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "realDonaldTrump") {
        this.setState({"Donald Trump": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "tedcruz") {
        this.setState({"Ted Cruz": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "marcorubio") {
        this.setState({"Marco Rubio": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "RealBenCarson") {
        this.setState({"Ben Carson": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else {
        console.log("No candidate detected");
      }
    },

    componentDidMount: function () {
      socket.on('message', this._onMessageReceived);
    },

    render: function () {
      return (
        <div className="messages">
          <Grommet.Split>
            <Grommet.Article size="small">
              <Grommet.Header pad={{horizontal: 'medium'}}>Daily Current Average Public Sentiment from 0 to 100</Grommet.Header>
              <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                  {"label": "Sanders", "value": this.state["Bernie Sanders"].average, "colorIndex": "graph-1"},
                  {"label": "Clinton", "value": this.state["Hillary Clinton"].average, "colorIndex": "graph-2"},
                  {"label": "Trump", "value": this.state["Donald Trump"].average, "colorIndex": "graph-3"},
                  {"label": "Cruz", "value": this.state["Ted Cruz"].average, "colorIndex": "graph-4"},
                  {"label": "Rubio", "value": this.state["Marco Rubio"].average, "colorIndex": "graph-5"},
                  {"label": "Carson", "value": this.state["Ben Carson"].average, "colorIndex": "graph-6"},
                ]} />
              <Grommet.Header pad={{horizontal: 'medium'}}>Instantaneous Public Sentiment from 0 to 100</Grommet.Header>
              <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                  {"label": "Sanders", "value": this.state["Bernie Sanders"].averageWindow1, "colorIndex": "graph-1"},
                  {"label": "Clinton", "value": this.state["Hillary Clinton"].averageWindow1, "colorIndex": "graph-2"},
                  {"label": "Trump", "value": this.state["Donald Trump"].averageWindow1, "colorIndex": "graph-3"},
                  {"label": "Cruz", "value": this.state["Ted Cruz"].averageWindow1, "colorIndex": "graph-4"},
                  {"label": "Rubio", "value": this.state["Marco Rubio"].averageWindow1, "colorIndex": "graph-5"},
                  {"label": "Carson", "value": this.state["Ben Carson"].averageWindow1, "colorIndex": "graph-6"},
                ]} />
              <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets Today</Grommet.Header>
              <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 30000, "label": "30,000"}} series={[
                  {"label": "Sanders", "value": this.state["Bernie Sanders"].n, "colorIndex": "graph-1"},
                  {"label": "Clinton", "value": this.state["Hillary Clinton"].n, "colorIndex": "graph-2"},
                  {"label": "Trump", "value": this.state["Donald Trump"].n, "colorIndex": "graph-3"},
                  {"label": "Cruz", "value": this.state["Ted Cruz"].n, "colorIndex": "graph-4"},
                  {"label": "Rubio", "value": this.state["Marco Rubio"].n, "colorIndex": "graph-5"},
                  {"label": "Carson", "value": this.state["Ben Carson"].n, "colorIndex": "graph-6"},
                ]} />
            </Grommet.Article>
            <Grommet.Tabs>
              <Grommet.Tab title="Bernie Sanders">
                <Grommet.Box>
                  <Grommet.Header pad={{horizontal: 'small'}}>Bernie Sanders</Grommet.Header>
                  <Grommet.Image src="img/bernie.jpg" size="small" full={false} />
                  <Grommet.Article>
                    <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                    <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                        {"label": "Positive", "value": this.state["Bernie Sanders"].nPositive, "colorIndex": "graph-1"},
                        {"label": "Negative", "value": this.state["Bernie Sanders"].nNegative, "colorIndex": "graph-2"},
                        {"label": "Neutral", "value": this.state["Bernie Sanders"].nNeutral, "colorIndex": "graph-3"}
                      ]} />
                      <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                          {"label": "Daily Average", "value": this.state["Bernie Sanders"].average, "colorIndex": "graph-1"},
                          {"label": "Instantaneous", "value": this.state["Bernie Sanders"].averageWindow1, "colorIndex": "graph-2"},
                        ]} />
                  </Grommet.Article>
                  <Grommet.Header pad={{horizontal: 'medium'}}>Current News Articles</Grommet.Header>
                  <Grommet.Table>
                      <thead>
                        <tr>
                          <th>Title</th>
                          <th>Preview</th>
                          <th>Summary</th>
                        </tr>
                      </thead>
                      <tbody>
                      <% for (var i=0; i<candidateArticles["Bernie Sanders"].articles.length; i++) { %>
                      <Grommet.TableRow>
                        <td><a href="<%= candidateArticles["Bernie Sanders"].articles[i].reference %>" target="_blank"><%= candidateArticles["Bernie Sanders"].articles[i].title %></a></td>
                        <td className="bernie-<%= i %>"><Grommet.Icons.Base.Expand large={false} colorIndex="brand" /></td>
                        <td><%= candidateArticles["Bernie Sanders"].articles[i].summary %></td>
                      </Grommet.TableRow>
                      <% } %>
                      </tbody>
                    </Grommet.Table>
                  <div className="Bernie-wordcloud">
                    <div className="legend">
                        Commonly used words are larger and slightly faded in color.  Less common words are smaller and darker.
                    </div>
                  </div>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Hillary Clinton">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Hillary Clinton</Grommet.Header>
                    <Grommet.Image src="img/hillary.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Hillary Clinton"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Hillary Clinton"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Hillary Clinton"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Hillary Clinton"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Hillary Clinton"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Donald Trump">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Donald Trump</Grommet.Header>
                    <Grommet.Image src="img/donald.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Donald Trump"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Donald Trump"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Donald Trump"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Donald Trump"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Donald Trump"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Ted Cruz">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Ted Cruz</Grommet.Header>
                    <Grommet.Image src="img/ted.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Ted Cruz"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Ted Cruz"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Ted Cruz"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Ted Cruz"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Ted Cruz"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Marco Rubio">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Marco Rubio</Grommet.Header>
                    <Grommet.Image src="img/marco.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Marco Rubio"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Marco Rubio"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Marco Rubio"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Marco Rubio"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Marco Rubio"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Ben Carson">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Ben Carson</Grommet.Header>
                    <Grommet.Image src="img/ben.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Ben Carson"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Ben Carson"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Ben Carson"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Ben Carson"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Ben Carson"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
            </Grommet.Tabs>
          </Grommet.Split>
          <Grommet.Footer>
            <p>Sentiment analysis powered by &nbsp; <a href="https://havenondemand.com" target="_blank"><img src="img/hpe_hod.png" height="50px" /></a></p>
          </Grommet.Footer>
        </div>
      );
    }
  });

    var App = React.createClass({
      render: function() {
        return (
          <Grommet.App>
            <Grommet.Section pad={{horizontal: 'medium'}}>
              <SentimentMeters />
            </Grommet.Section>
            <Grommet.Section pad={{horizontal: 'medium'}}>
            </Grommet.Section>
          </Grommet.App>
        );
      }
    });

    var element = document.getElementById('content');
    ReactDOM.render(React.createElement(App), element);
  </script>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-68842515-1', 'auto');
    ga('send', 'pageview');
  </script>
  <script>
  // $(window).load(function() {
  //   $.ajax({
  //   url: "/candidatehtml",
  //   type: 'GET',
  //   success: function(res) {
  //     console.log(res);
  //     $.each(res, function(key, value) {
  //       var candidateFirstName = key.split(" ")[0];
  //       generateWordCloud(value.concepts, candidateFirstName);
  //     });
  //   }
  //   });
  //
  //
  //
  //   var arr = ["bernie", "hillary", "donald", "ted", "marco", "ben"];
  //   for (var i=0; i<arr.length; i++) {
  //     for (var j=0; j<6; j++) {
  //       console.log('.'+arr[i]+'-'+j);
  //       var myElem = document.getElementsByClassName(arr[i]+'-'+j);
  //       if (myElem.length > 0) {
  //         $('.'+arr[i]+'-'+j).colorbox({html:"<h1>"+j+"</h1>"});
  //       }
  //     }
  //   }
  // });
  </script>
</body>
<script>
$(window).load(function() {
    $.ajax({
    url: "/candidatehtml",
    type: 'GET',
    success: function(res) {
      console.log(res);
      $.each(res, function(key, value) {
        var candidateFirstName = key.split(" ")[0].toLowerCase();
        for (var j=0; j<6; j++) {
          console.log('.'+candidateFirstName+'-'+j);
          var myElem = document.getElementsByClassName(candidateFirstName+'-'+j);
          if (myElem.length > 0 && value.articles[j].html) {
            $('.'+candidateFirstName+'-'+j).colorbox({html: value.articles[j].html});
          }
        }
        generateWordCloud(value.concepts, candidateFirstName);
      });
    }
    });

    function generateWordCloud(frequency_list, candidate) {
      var frequency_list = [{"text":"study","size":40},{"text":"motion","size":15},{"text":"forces","size":10},{"text":"electricity","size":15},{"text":"movement","size":10},{"text":"relation","size":5},{"text":"things","size":10},{"text":"force","size":5},{"text":"ad","size":5},{"text":"energy","size":85},{"text":"living","size":5},{"text":"nonliving","size":5},{"text":"laws","size":15},{"text":"speed","size":45},{"text":"velocity","size":30},{"text":"define","size":5},{"text":"constraints","size":5},{"text":"universe","size":10},{"text":"physics","size":120},{"text":"describing","size":5},{"text":"matter","size":90},{"text":"physics-the","size":5},{"text":"world","size":10},{"text":"works","size":10},{"text":"science","size":70},{"text":"interactions","size":30},{"text":"studies","size":5},{"text":"properties","size":45},{"text":"nature","size":40},{"text":"branch","size":30},{"text":"concerned","size":25},{"text":"source","size":40},{"text":"google","size":10},{"text":"defintions","size":5},{"text":"two","size":15},{"text":"grouped","size":15},{"text":"traditional","size":15},{"text":"fields","size":15},{"text":"acoustics","size":15},{"text":"optics","size":15},{"text":"mechanics","size":20},{"text":"thermodynamics","size":15},{"text":"electromagnetism","size":15},{"text":"modern","size":15},{"text":"extensions","size":15},{"text":"thefreedictionary","size":15},{"text":"interaction","size":15},{"text":"org","size":25},{"text":"answers","size":5},{"text":"natural","size":15},{"text":"objects","size":5},{"text":"treats","size":10},{"text":"acting","size":5},{"text":"department","size":5},{"text":"gravitation","size":5},{"text":"heat","size":10},{"text":"light","size":10},{"text":"magnetism","size":10},{"text":"modify","size":5},{"text":"general","size":10},{"text":"bodies","size":5},{"text":"philosophy","size":5},{"text":"brainyquote","size":5},{"text":"words","size":5},{"text":"ph","size":5},{"text":"html","size":5},{"text":"lrl","size":5},{"text":"zgzmeylfwuy","size":5},{"text":"subject","size":5},{"text":"distinguished","size":5},{"text":"chemistry","size":5},{"text":"biology","size":5},{"text":"includes","size":5},{"text":"radiation","size":5},{"text":"sound","size":5},{"text":"structure","size":5},{"text":"atoms","size":5},{"text":"including","size":10},{"text":"atomic","size":10},{"text":"nuclear","size":10},{"text":"cryogenics","size":10},{"text":"solid-state","size":10},{"text":"particle","size":10},{"text":"plasma","size":10},{"text":"deals","size":5},{"text":"merriam-webster","size":5},{"text":"dictionary","size":10},{"text":"analysis","size":5},{"text":"conducted","size":5},{"text":"order","size":5},{"text":"understand","size":5},{"text":"behaves","size":5},{"text":"en","size":5},{"text":"wikipedia","size":5},{"text":"wiki","size":5},{"text":"physics-","size":5},{"text":"physical","size":5},{"text":"behaviour","size":5},{"text":"collinsdictionary","size":5},{"text":"english","size":5},{"text":"time","size":35},{"text":"distance","size":35},{"text":"wheels","size":5},{"text":"revelations","size":5},{"text":"minute","size":5},{"text":"acceleration","size":20},{"text":"torque","size":5},{"text":"wheel","size":5},{"text":"rotations","size":5},{"text":"resistance","size":5},{"text":"momentum","size":5},{"text":"measure","size":10},{"text":"direction","size":10},{"text":"car","size":5},{"text":"add","size":5},{"text":"traveled","size":5},{"text":"weight","size":5},{"text":"electrical","size":5},{"text":"power","size":5}];

      var color = d3.scale.linear()
              .domain([0,1,2,3,4,5,6,10,15,20,100])
              .range(["#ddd", "#ccc", "#bbb", "#aaa", "#999", "#888", "#777", "#666", "#555", "#444", "#333", "#222"]);

      d3.layout.cloud().size([800, 300])
              .words(frequency_list)
              .rotate(0)
              .fontSize(function(d) { return d.size; })
              .on("end", draw)
              .start();

      function draw(words) {
          d3.select('.'+candidate+'-wordcloud').append("svg")
                  .attr("width", 850)
                  .attr("height", 350)
                  .attr("class", "wordcloud")
                  .append("g")
                  // without the transform, words words would get cutoff to the left and top, they would
                  // appear outside of the SVG area
                  .attr("transform", "translate(320,200)")
                  .selectAll("text")
                  .data(words)
                  .enter().append("text")
                  .style("font-size", function(d) { return d.size + "px"; })
                  .style("fill", function(d, i) { return color(i); })
                  .attr("transform", function(d) {
                      return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                  })
                  .text(function(d) { return d.text; });
      }
    }
  });
</script>
</html>
