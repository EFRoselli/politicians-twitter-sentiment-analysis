<!DOCTYPE html>
<html>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="js/d3.layout.cloud.js"></script>
<head>
  <meta charset="UTF-8">
  <title>Politician Sentiment Analysis</title>
  <link rel="shortcut icon" href="/img/favicon.ico" />
  <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400italic,400,700' rel='stylesheet' type='text/css'>
  <!-- <link href='http://grommet.io/assets/latest/css/grommet.min.css' rel='stylesheet' type='text/css'> -->
  <link href='css/grommet.min.css' rel='stylesheet' type='text/css'>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.2/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.2/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
  <!-- <script src="http://grommet.io/assets/latest/grommet.min.js"></script> -->
  <script src="js/grommet.min.js"></script>
  <style>
  .meter--bar:not(.meter--vertical) .meter__value {
    display: none;
  }
  .meter--bar.meter--vertical .meter__value {
    display: none;
  }
  </style>
</head>
<body>
  <!-- <script src="https://cdn.socket.io/socket.io-1.2.0.js"></script> -->
  <script src="/socket.io/socket.io.js"></script>
  <div id="content"></div>
  <script type="text/babel">

  var socket = io();

  var SentimentMeters = React.createClass({
    getInitialState: function() {
      var data = {
        "Bernie Sanders": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Hillary Clinton": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Donald Trump": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Ted Cruz": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Marco Rubio": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        },
        "Ben Carson": {
          tweet: "",
          positive: {},
          negative: {},
          aggregate: {},
          rgbInstantaneous: {},
          rgbAverage: {},
          average: 0.0,
          averageWindow1: 0.0,
          n: 0,
          nNeutral: 0,
          nNegative: 0,
          nPositive: 0
        }
      }
      return data;
    },

    _onMessageReceived: function (msg) {
      console.log(msg);
      if (msg.candidate === "SenSanders") {
        this.setState({"Bernie Sanders": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "HillaryClinton") {
        this.setState({"Hillary Clinton": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "realDonaldTrump") {
        this.setState({"Donald Trump": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "tedcruz") {
        this.setState({"Ted Cruz": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "marcorubio") {
        this.setState({"Marco Rubio": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else if (msg.candidate === "RealBenCarson") {
        this.setState({"Ben Carson": {
          tweet: msg.tweet,
          positive: msg.positive,
          negative: msg.negative,
          aggregate: msg.aggregate,
          rgbInstantaneous: msg.rgbInstantaneous,
          rgbAverage: msg.rgbAverage,
          average: Math.floor(msg.average),
          averageWindow1: Math.floor(msg.averageWindow1),
          n: msg.n,
          nNeutral: msg.nNeutral,
          nNegative: msg.nNegative,
          nPositive: msg.nPositive
          }
        });
      } else {
        console.log("No candidate detected");
      }
    },

    componentDidMount: function () {
      socket.on('message', this._onMessageReceived);
    },

    render: function () {
      return (
        <div className="messages">
          <Grommet.Split>
            <Grommet.Article size="small">
              <Grommet.Header pad={{horizontal: 'medium'}}>Daily Current Average Public Sentiment from 0 to 100</Grommet.Header>
              <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                  {"label": "Sanders", "value": this.state["Bernie Sanders"].average, "colorIndex": "graph-1"},
                  {"label": "Clinton", "value": this.state["Hillary Clinton"].average, "colorIndex": "graph-2"},
                  {"label": "Trump", "value": this.state["Donald Trump"].average, "colorIndex": "graph-3"},
                  {"label": "Cruz", "value": this.state["Ted Cruz"].average, "colorIndex": "graph-4"},
                  {"label": "Rubio", "value": this.state["Marco Rubio"].average, "colorIndex": "graph-5"},
                  {"label": "Carson", "value": this.state["Ben Carson"].average, "colorIndex": "graph-6"},
                ]} />
              <Grommet.Header pad={{horizontal: 'medium'}}>Instantaneous Public Sentiment from 0 to 100</Grommet.Header>
              <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                  {"label": "Sanders", "value": this.state["Bernie Sanders"].averageWindow1, "colorIndex": "graph-1"},
                  {"label": "Clinton", "value": this.state["Hillary Clinton"].averageWindow1, "colorIndex": "graph-2"},
                  {"label": "Trump", "value": this.state["Donald Trump"].averageWindow1, "colorIndex": "graph-3"},
                  {"label": "Cruz", "value": this.state["Ted Cruz"].averageWindow1, "colorIndex": "graph-4"},
                  {"label": "Rubio", "value": this.state["Marco Rubio"].averageWindow1, "colorIndex": "graph-5"},
                  {"label": "Carson", "value": this.state["Ben Carson"].averageWindow1, "colorIndex": "graph-6"},
                ]} />
              <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets Today</Grommet.Header>
              <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 30000, "label": "30,000"}} series={[
                  {"label": "Sanders", "value": this.state["Bernie Sanders"].n, "colorIndex": "graph-1"},
                  {"label": "Clinton", "value": this.state["Hillary Clinton"].n, "colorIndex": "graph-2"},
                  {"label": "Trump", "value": this.state["Donald Trump"].n, "colorIndex": "graph-3"},
                  {"label": "Cruz", "value": this.state["Ted Cruz"].n, "colorIndex": "graph-4"},
                  {"label": "Rubio", "value": this.state["Marco Rubio"].n, "colorIndex": "graph-5"},
                  {"label": "Carson", "value": this.state["Ben Carson"].n, "colorIndex": "graph-6"},
                ]} />
            </Grommet.Article>
            <Grommet.Tabs>
              <Grommet.Tab title="Bernie Sanders">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Bernie Sanders</Grommet.Header>
                    <Grommet.Image src="img/bernie.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Bernie Sanders"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Bernie Sanders"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Bernie Sanders"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Bernie Sanders"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Bernie Sanders"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                    <Grommet.Table>
                      <thead>
                        <tr>
                          <th>Title</th>
                          <th>Summary</th>
                        </tr>
                      </thead>
                      <tbody>
                      <% for (var i=0; i<candidateArticles["Bernie Sanders"].articles.length; i++) { %>
                      <Grommet.TableRow>
                        <td><a href="<%= candidateArticles["Bernie Sanders"].articles[i].reference %>" target="_blank"><%= candidateArticles["Bernie Sanders"].articles[i].title %></a></td>
                        <td><%= candidateArticles["Bernie Sanders"].articles[i].summary %></td>
                      </Grommet.TableRow>
                      <% } %>
                      </tbody>
                    </Grommet.Table>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Hillary Clinton">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Hillary Clinton</Grommet.Header>
                    <Grommet.Image src="img/hillary.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Hillary Clinton"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Hillary Clinton"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Hillary Clinton"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Hillary Clinton"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Hillary Clinton"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Donald Trump">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Donald Trump</Grommet.Header>
                    <Grommet.Image src="img/donald.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Donald Trump"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Donald Trump"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Donald Trump"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Donald Trump"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Donald Trump"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Ted Cruz">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Ted Cruz</Grommet.Header>
                    <Grommet.Image src="img/ted.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Ted Cruz"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Ted Cruz"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Ted Cruz"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Ted Cruz"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Ted Cruz"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Marco Rubio">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Marco Rubio</Grommet.Header>
                    <Grommet.Image src="img/marco.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Marco Rubio"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Marco Rubio"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Marco Rubio"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Marco Rubio"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Marco Rubio"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
              <Grommet.Tab title="Ben Carson">
                <Grommet.Box>
                  <Grommet.Sidebar colorIndex="light-1">
                    <Grommet.Header pad={{horizontal: 'small'}}>Ben Carson</Grommet.Header>
                    <Grommet.Image src="img/ben.jpg" size="small" full={false} />
                    <Grommet.Article>
                      <Grommet.Header pad={{horizontal: 'medium'}}>Number of Tweets</Grommet.Header>
                      <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "0"}} max={{"value": 10000, "label": "10,000"}} series={[
                          {"label": "Positive", "value": this.state["Ben Carson"].nPositive, "colorIndex": "graph-1"},
                          {"label": "Negative", "value": this.state["Ben Carson"].nNegative, "colorIndex": "graph-2"},
                          {"label": "Neutral", "value": this.state["Ben Carson"].nNeutral, "colorIndex": "graph-3"}
                        ]} />
                        <Grommet.Header pad={{horizontal: 'medium'}}>Public Sentiment</Grommet.Header>
                        <Grommet.Meter size="large" legend={{total: false}} min={{"value": 0, "label": "Low Sentiment"}} max={{"value": 100, "label": "High Sentiment"}} series={[
                            {"label": "Daily Average", "value": this.state["Ben Carson"].average, "colorIndex": "graph-1"},
                            {"label": "Instantaneous", "value": this.state["Ben Carson"].averageWindow1, "colorIndex": "graph-2"},
                          ]} />
                    </Grommet.Article>
                  </Grommet.Sidebar>
                </Grommet.Box>
              </Grommet.Tab>
            </Grommet.Tabs>
          </Grommet.Split>
          <Grommet.Footer>
            <p>Sentiment analysis powered by &nbsp; <a href="https://havenondemand.com" target="_blank"><img src="img/hpe_hod.png" height="50px" /></a></p>
          </Grommet.Footer>
        </div>
      );
    }
  });

    var App = React.createClass({
      render: function() {
        return (
          <Grommet.App>
            <Grommet.Section pad={{horizontal: 'medium'}}>
              <SentimentMeters />
            </Grommet.Section>
            <Grommet.Section pad={{horizontal: 'medium'}}>
            </Grommet.Section>
          </Grommet.App>
        );
      }
    });

    var element = document.getElementById('content');
    ReactDOM.render(React.createElement(App), element);
  </script>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-68842515-1', 'auto');
    ga('send', 'pageview');
  </script>
</body>
<script>
    // var length = <%= candidateArticles["Bernie Sanders"].concepts.length %>;
    // var array = [];
    // for (var i=0; i<length; i++) {
    //   var text = "<%= candidateArticles["Bernie Sanders"].concepts[i].text %>";
    //   var size = <%= candidateArticles["Bernie Sanders"].concepts[i].size %>;
    //   array.push({text: text, size: size});
    // }
//     var array = <%= JSON.parse(candidateConcepts).concepts %>
//     var frequency_list = array;
//
//
//     var color = d3.scale.linear()
//             .domain([0,1,2,3,4,5,6,10,15,20,100])
//             .range(["#ddd", "#ccc", "#bbb", "#aaa", "#999", "#888", "#777", "#666", "#555", "#444", "#333", "#222"]);
//
//     d3.layout.cloud().size([800, 300])
//             .words(frequency_list)
//             .rotate(0)
//             .fontSize(function(d) { return d.size; })
//             .on("end", draw)
//             .start();
//
//     function draw(words) {
//         d3.select("body").append("svg")
//                 .attr("width", 850)
//                 .attr("height", 350)
//                 .attr("class", "wordcloud")
//                 .append("g")
//                 // without the transform, words words would get cutoff to the left and top, they would
//                 // appear outside of the SVG area
//                 .attr("transform", "translate(320,200)")
//                 .selectAll("text")
//                 .data(words)
//                 .enter().append("text")
//                 .style("font-size", function(d) { return d.size + "px"; })
//                 .style("fill", function(d, i) { return color(i); })
//                 .attr("transform", function(d) {
//                     return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
//                 })
//                 .text(function(d) { return d.text; });
//     }
// </script>

<div style="width: 40%;">
    <div class="legend">
        Commonly used words are larger and slightly faded in color.  Less common words are smaller and darker.
    </div>

</div>
</html>
